
public Agent():

    - GOAL: Facilitate ticket processing at designated workstation

    private float RateOfProcess; - rate at which agent can process customer at check in line

    public InPersonAgent(): - subclass of Agent
        - GOAL: Personally process tickets at PersonLine


        public InPersonAgent();
            - constructor of InPersonAgent
            - initializes variables

        public void processTicket(Passenger passenger);
            - Process passenger

    public TerminalAgent(): - subclass of Agent
        - GOAL: Provide assistance to passengers in TerminalLine


        private Queue helpLine;
            - assist passengers who need help with terminal on FIFO

        public TerminalAgent();
            - constructor of TerminalAgent
            - initializes variables



        public void provideAssistance(Terminal terminal);
            - provides assistance to passenger at Terminal terminal


public Supervisor() - separate entity from Agent, has more authority/functionality
    - GOAL: Supervisor should move around and aid/hide at direction of user

    private float RateOfProcess;
        - rate at which agent can process customer.
        - should be greater than Agent's RateOfProcess

    private int MAX_NUMBER_OF_SUPERVISORS = 1; - default number of supervisors, can be increased

    public Supervisor();
        - constructor of Supervisor
        - initialize variables

    public void moveSupervisor(Line line); - move supervisor to indicated line
    public void sideLine(); - remove supervisor from check-in, not permanent


public Line():
    - GOAL: handles queue of passengers looking to process their tickets


    private Queue line;
        - data structure that handles query of passengers
        - with Queue's pop() method, we don't have to implement remove method since it does that automatically
    private boolean inUse; - indicates whether line is processing a passenger


    public void addPassenger(Passenger passenger);
        - adds passenger to the end of queue of this object


    public void processPassenger();
        - begins processing pop() passenger for flight
        - exact implementation varies by subclass line

    public PersonLine() - subclass of Line, handles booth operated solely by people
        - GOAL: handle queue for people entering ticket processing booth done by human

        private PriorityQueue line;
            - Queue to enter booth
            - Gives higher priority to passengers with frequent flier status

        public PersonLine();
            - constructor of PersonLine
            - starts off with an agent at booth
        public void processPassenger();
            - processes passenger with frequent flier, if none then process queue as normal


    public AutomatedLine() - subclass of Line, handles processing mainly by terminals
    - GOAL: handle queue for people entering ticket processing booth done by terminal


        private static final int TERMINALS_PER_AGENT;
            - preset number of terminals single agent can float around

        private int numberOfTerminals;
            - number of terminals in booth

        private Queue line;
            - Queue to enter booth

        private Queue availableTerminal;
            - Collection of terminals available
            - Design provides no indication of distinguishable terminals
                besides availability, therefore individual tracking of terminals pointless
            - first terminal in queue passed to next available passenger

        public AutomatedLine();
            - constructor of AutomatedLine
            - initially starts off with all its terminals available


        public void processPassenger();
            - allocates a terminal to the pop() passenger
            - terminal begins processing passenger's ticket

        private void removeAvailableTerminal(Terminal terminal);
            - removes first terminal from queue when it is allocated to passenger

        public void addAvailableTerminal(Terminal terminal);
            - returns terminal to availableQueue when it finishes processing passenger

public Terminal():
    - GOAL: facilitate ticket processing done by terminal

    private Agent assignedAgent; - Agent assigned to troubleshoot this terminal
    private float RateOfProcess; - rate at which normal use of terminal will process ticket

    public Terminal(Agent agent);
        - constructor for Terminal
        - initializes object and assign Agent to monitor this terminal

    public boolean useTerminal(Passenger passenger);
        - processes passenger's ticket
                * if successful passenger leaves terminal and exits booth
                * else redirected to personLine

    private void redirectPassenger(Passenger passenger);
        - redirects passenger to person line
        - since we're assuming passenger only redirected at front of terminal

    private void requestAssistance();
        -

public Passenger():
    - GOAL: easily creatable objects that enter random queue to processed


    private boolean isFrequentFlier;
        - indicates whether passenger has frequent flier status
        - frequent flier entitles passenger to higher priority in check-in line
    private boolean slowProcess;
        - if true increases processing time
        - else process time unmodified
    private boolean requireManager;
        - if true passenger can only be processed at intervention of supervisor


    public Passenger();
        - constructor, automatically move to line on generation
        - determines on creation whether the passenger will be a slowProcess or not
        - determines whether passenger requires a manager to process them

    private void enterLine(Line line);
        - passes passenger to desired line
        - private so it is not exposed and manipulated to scripted line entering

    public boolean getFrequentFlier();
        - get method returns isFrequentFlier
    public boolean getSlowProcess();
        - get method returns slowProcess
    public boolean getRequireManager();
        - get method returns requireManager;

public Shop():
    - GOAL: set up interface for shop team to interact and develop on

    public void buyDiamonds();
        - brings up prompt that allows user to purchase with credit card
    public void buyWithDiamonds();
        - brings up prompt of game items that the user can buy diamonds
        - as these can be subject to change, we will not specifically define items to be purchased here