


public Agent():

    private float RateOfProcess; - rate at which agent can process customer at check in line
    private boolean isMovable = false; - agent is stuck at current line
    private static final float SPEED_UP_MODIFIER;
        - modifier for improvements in ticket processing, such as supervisor speed bonus
        - Prerequisite: > 1

    public Supervisor() - subclass of Agent, has more actions/authority

        RateOfProcess *= SPEED_UP_MODIFIER; - can process customers faster than normal agent
        private boolean isFlexible = true; - can work both person and automated booth
        private int MAX_NUMBER_OF_SUPERVISORS = 1; - default number of supervisors, can be increased

        public void moveSupervisor(Line line); - move supervisor to indicated line
        public void sideLine(); - remove supervisor from check-in, not permanent

public Line():

    private Queue line; - data structure that handles query of passengers

    public void addPassenger(Passenger passenger);
        - adds passenger to the end of queue of this object

    public void removePassenger();
        - checks if passenger has been serviced, then removes them from line

    public void processPassenger(Queue line);
        - begins processing passenger for flight
        - exact implementation varies by subclass line


    public PersonLine() - subclass of Line, handles booth operated solely by people

        public PersonLine();
            - constructor of PersonLine
            - starts off with an agent at booth
        public void processPassenger(Passenger passenger);
            - process passenger's ticket

    public AutomatedLine() - subclass of Line, handles processing mainly by terminals

        private static final int TERMINALS_PER_AGENT;
            - preset number of terminals single agent can float around

        private Queue availableTerminal;
            - Collection of terminals available
            - Design provides no indication of distinguishable terminals
                besides availability, therefore individual tracking of terminals pointless
            - first terminal in queue passed to next available passenger

        public AutomatedLine();
            - constructor of AutomatedLine
            - initially starts off with all its terminals available


        public void processPassenger(Passenger passenger);
            - allocates a terminal to the passenger

        private void removeAvailableTerminal(Terminal terminal);
            - removes first terminal from queue when it is allocated to passenger

        public void addAvailableTerminal(Terminal terminal);
            - returns terminal to availableQueue when it finishes processing passneger


public Terminal():

    public boolean useTerminal(Passenger passenger);
        - processes passenger's ticket
                * if successful passenger leaves terminal and exits booth
                * else redirected to personLine

    private void redirectPassenger(Passenger passenger);
        - redirects passenger to person line
        - since we're assuming passenger only redirected at front of terminal

public Passenger():

    private boolean inLine; - indicates whether the
    private boolean isFrequentFlier;
        - indicates whether passenger has frequent flier status
        - frequent flier entitles passenger to higher priority in check-in line

    public Passenger(); - constructor, automatically move to line on generation

    private void enterLine(Line line);
        - passes passenger to desired line
        - private so it is not exposed and manipulated to scripted line entering