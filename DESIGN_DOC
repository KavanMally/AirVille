


public Agent():

    private float RateOfProcess; - rate at which agent can process customer at check in line
    private boolean isMovable = false; - agent is stuck at current line
    private static final int SPEED_UP_MODIFIER;
    private static final int SLOW_DOWN_MODIFIER;



    public Regular() - subclass of Agent, has less authority

    public Supervisor() - subclass of Agent, has more actions/authority

         RateOfProcess *= 2; - can process customers faster than normal agent
         private boolean isFlexible = true; - can work both person and automated booth
         private int MAX_NUMBER_OF_SUPERVISORS = 1; - default number of supervisors, can be increased

         public void moveSupervisor(Line line); - move supervisor to indicated line
         public void sideLine(); - remove supervisor from check-in, not permanent

public Line():

    private Queue line; - data structure that handles query of passengers

    public void addPassenger(Passenger passenger);
        - adds passenger to the end of queue of this object

    public void removePassenger();
        - checks if passenger has been serviced, then removes them from line

    public void processPassenger(Queue line);
        - begins processing passenger for flight
        - exact implementation varies by subclass line


    public PersonLine() - subclass of Line, handles booth operated solely by people
        public void processPassenger(Passenger passenger);
            - checks

    public AutomatedLine() - subclass of Line, handles processing mainly by terminals

         private Queue availableTerminal;
            - Collection of terminals available
            - Design provides no indication of distinguishable terminals besides availability
            - first terminal in queue passed to next available passenger

        public AutomatedLine();
            - constructor of AutomatedLine
            - initially starts off with all its terminals available

        private static final int TERMINALS_PER_AGENT;
            - preset number of terminals single agent can float around



        public void redirectPassenger();
            - redirects passenger to person line
            - since we're assuming passenger only redirected at front of terminal

        public void processPassenger(Passenger passenger);
            -

        private void removeAvailableTerminal(


public Terminal():

    public void useTerminal(Passenger passenger);
        -


public Passenger():

    private boolean inLine; - indicates whether the
    private boolean isFrequentFlier;
        - indicates whether passenger has frequent flier status
        - frequent flier entitles passenger to higher priority in check-in line

    public Passenger(); - constructor, automatically move to line on generation

    private void enterLine(Line line);
        - passes passenger to desired line
        - private so it is not exposed and manipulated to scripted line entering